# This is a template package that defines how to get and interprate information from Nexus
# https://esphome.io/components/packages.html
# https://frc.nexus/en/
# https://frc.nexus/api/v1/docs#operation/pullLiveEventStatus

# vars
# web_id - defines the id of the web server component
# default_event_id - defines the nexus event key
# default_nexus_api_key - defines the nexus api key
# red_off - defines the code to execute to turn off red alliance sequence
# blue_ioff - defines the code to execute to turn off blue alliance sequence
# red_on - defines the code to execute to turn on the red alliance sequence
# red_off - defines the code to execute to turn on the blue alliance sequence

# This is an extnetion of the web_server for addition configurations for nexus
# https://esphome.io/components/web_server.html
web_server: 
  id: ${web_id}
  sorting_groups:
    - id: nexus_web_settings
      name: "Nexus Settings"
      sorting_weight: 20

# This defines the text confgurations for the settings
# https://esphome.io/components/text/
text:
  # https://esphome.io/components/text/template
  # This is the nexus event key that can be found on the home page of Nexus
  - platform: template
    id: event_id
    optimistic: True
    restore_value: True
    initial_value: '${default_event_id}'
    mode: text
    web_server:
      sorting_group_id: nexus_web_settings
      sorting_weight: 150
  # This is the nexus api key that will need to generated by logging into Nexus and going to the API page to generate
  - platform: template
    id: nexus_api_key
    optimistic: True
    restore_value: True
    initial_value: '${default_nexus_api_key}'
    mode: password
    web_server:
      sorting_group_id: nexus_web_settings
      sorting_weight: 160

# This is used to execute the call to nexus on a time interval
# https://esphome.io/components/interval.html
interval:
  - interval: 5min
    then:
      # https://esphome.io/components/http_request.html
      - http_request.get:
          capture_response: true
          max_response_buffer_size: 100kB
          url: !lambda return "https://frc.nexus/api/v1/event/" + id(event_id).state;
          headers:
            Nexus-Api-Key: !lambda return id(nexus_api_key).state.c_str();
          on_response:
            then:
              - if:
                  condition:
                    lambda: return response->status_code == 200;
                  then:
                    - lambda: |-
                        ${red_off}
                        ${blue_off}

                        json::parse_json(body, [](JsonObject root) -> bool {
                          bool found = false;
                          int team = id(team_number).state;

                          for (int i = 0; root["matches"][i] && !found; i++) {
                            const char* match_status = root["matches"][i]["status"];
                            if (std::string(match_status) == "On field") {
                              continue;
                            }

                            for (int j = 0; root["matches"][i]["redTeams"][j] && !found; j++) {
                              int redTeam = root["matches"][i]["redTeams"][j];
                              if (redTeam == team) {
                                ESP_LOGI("nexus", "Next alliance is Red");
                                ${red_on}
                                found = true;
                              }
                            }

                            for (int j = 0; root["matches"][i]["blueTeams"][j] && !found; j++) {
                              int blueTeam = root["matches"][i]["blueTeams"][j];
                              if (blueTeam == team) {
                                ESP_LOGI("nexus", "Next alliance is Blue");
                                ${blue_on}
                                found = true;
                              }
                            }
                          }

                          if(!found) {
                            ESP_LOGW("nexus", "Team(%s) not found at event(%s), double check that event_id and team_number are set correctly.", id(team_number_text), id(event_id));
                          }
                          return found;
                        });
                  else:
                    - logger.log:
                        format: "Error: Response status: %d, message %s"
                        args: [ 'response->status_code', 'body.c_str()' ]